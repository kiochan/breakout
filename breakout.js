// Generated by CoffeeScript 1.10.0
(function() {
  var Box, Vector2, append, block, c, createElement, game, height, i, len, logic, px, resize, status, ui, updateFrame, width;

  status = {
    playing: false,
    life: 5,
    hScore: 100,
    score: 0,
    speed: 5,
    ai: false
  };

  width = function() {
    return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
  };

  height = function() {
    return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
  };

  createElement = function(tag) {
    return document.createElement(tag);
  };

  append = function(node) {
    return document.body.appendChild(node);
  };

  px = (function(n) {
    return n + "px";
  });

  len = function(x, y) {
    return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
  };

  c = {
    fgColor: '#FFF',
    bgColor: '#000'
  };

  Vector2 = (function() {
    Vector2.prototype.x = 0;

    Vector2.prototype.y = 0;

    function Vector2(x, y, speed) {
      var _dia;
      if (speed != null) {
        if (speed === 0) {
          this.x = 0;
          this.y = 0;
        } else {
          _dia = len(x, y);
        }
        this.x = x / _dia * speed;
        this.y = y / _dia * speed;
      } else {
        this.x = x;
        this.y = y;
      }
    }

    Vector2.prototype.change = function(x, y, speed) {
      var _dia;
      if (speed != null) {
        if (speed === 0) {
          this.x = 0;
          this.y = 0;
          return this;
        } else {

        }
        _dia = len(x, y);
        this.x = x / _dia * speed;
        this.y = y / _dia * speed;
        return this;
      } else {
        this.x = x;
        this.y = y;
        return this;
      }
    };

    Vector2.prototype.speed = function(v) {
      var _dia;
      if (v == null) {
        return len(this.x, this.y);
      }
      _dia = len(this.x, this.y);
      this.x = x / _dia * v;
      this.y = y / _dia * v;
      return this;
    };

    return Vector2;

  })();

  Box = (function() {
    Box.prototype.dom = null;

    Box.prototype.vector = null;

    Box.prototype.width = 10;

    Box.prototype.height = 10;

    Box.prototype.x = 0;

    Box.prototype.y = 0;

    Box.prototype.live = true;

    function Box(width1, height1, x1, y1) {
      this.width = width1;
      this.height = height1;
      this.x = x1;
      this.y = y1;
      this.dom = createElement('div');
      this.vector = new Vector2(0, 0);
    }

    Box.prototype.create = function() {
      this.update();
      append(this.dom);
      this.dom.style.position = 'absolute';
      this.dom.style.backgroundColor = c.fgColor;
      return this;
    };

    Box.prototype.remove = function() {
      this.dom.remove();
      return this;
    };

    Box.prototype.hit = function(o) {
      var _list, _res, i, ox, oxMax, oy, oyMax, ref, ref1;
      _res = false;
      ox = o.x;
      oxMax = o.x + o.width;
      oy = o.y;
      oyMax = o.y + o.height;
      _list = [ox, oy, oxMax, oy, ox, oyMax, oxMax, oyMax];
      i = 0;
      while (i < _list.length) {
        _res |= ((this.x < (ref = _list[i]) && ref < this.x + this.width)) && ((this.y < (ref1 = _list[i + 1]) && ref1 < this.y + this.height));
        i += 2;
      }
      return _res;
    };

    Box.prototype.reflex = function(o) {
      var _x, _xMax, _y, _yMax, ref, ref1, ref2, ref3;
      _x = o.x;
      _y = o.y;
      _xMax = o.x + o.width;
      _yMax = o.y + o.height;
      if ((_x < (ref = this.x) && ref < _xMax)) {
        o.vector.x = -Math.abs(o.vector.x);
      }
      if ((_x < (ref1 = this.x + this.width) && ref1 < _xMax)) {
        o.vector.x = Math.abs(o.vector.x);
      }
      if ((_y < (ref2 = this.y) && ref2 < _yMax)) {
        o.vector.y = -Math.abs(o.vector.y);
      }
      if ((_y < (ref3 = this.y + this.height) && ref3 < _yMax)) {
        o.vector.y = Math.abs(o.vector.y);
      }
      return this;
    };

    Box.prototype.edge = function() {
      if (this.x < 0) {
        this.vector.x = Math.abs(this.vector.x);
        return 4;
      }
      if (this.x + this.width > width()) {
        this.vector.x = -Math.abs(this.vector.x);
        return 2;
      }
      if (this.y < 0) {
        this.vector.y = Math.abs(this.vector.y);
        return 1;
      }
      if (this.y + this.height > height()) {
        this.vector.y = -Math.abs(this.vector.y);
        return 3;
      }
      return false;
    };

    Box.prototype.hide = function() {
      this.live = false;
      this.dom.style.display = 'none';
      return this;
    };

    Box.prototype.show = function() {
      this.live = true;
      this.dom.style.display = 'block';
      return this;
    };

    Box.prototype.update = function() {
      var p, ref, ref1, v;
      ref = {
        width: this.width,
        left: this.x
      };
      for (p in ref) {
        v = ref[p];
        this.dom.style[p] = px(v);
      }
      ref1 = {
        height: this.height,
        top: this.y
      };
      for (p in ref1) {
        v = ref1[p];
        this.dom.style[p] = px(v);
      }
      return this;
    };

    return Box;

  })();

  window.stage = {
    ball: new Box(10, 10, 0.5 * width() - 5, height() - 50),
    pad: new Box(100, 20, 0.5 * width() - 50, height() - 40),
    allBlock: {
      show: function() {
        var j, len1, o;
        for (j = 0, len1 = block.length; j < len1; j++) {
          o = block[j];
          o.show();
        }
        return this;
      },
      hide: function() {
        var j, len1, o;
        for (j = 0, len1 = block.length; j < len1; j++) {
          o = block[j];
          o.hide();
        }
        return this;
      },
      update: function() {
        var j, len1, o;
        for (j = 0, len1 = block.length; j < len1; j++) {
          o = block[j];
          o.update();
        }
        return this;
      },
      create: function() {
        var j, len1, o;
        for (j = 0, len1 = block.length; j < len1; j++) {
          o = block[j];
          o.create();
        }
        return this;
      },
      remove: function() {
        var j, len1, o;
        for (j = 0, len1 = block.length; j < len1; j++) {
          o = block[j];
          o.remove();
        }
        return this;
      }
    }
  };

  block = [];

  i = 0;

  while (i < 50) {
    block[i] = new Box(width() * 0.09, 20, width() * 0.1 * ((i % 10) + 0.05), Math.floor(i / 10) * (20 + width() * 0.005) + width() * 0.005);
    i++;
  }

  ui = {
    score: {},
    life: {}
  };

  for (i in ui) {
    ui[i] = {
      dom: createElement('p'),
      print: function(str) {
        return this.dom.innerHTML = str;
      }
    };
  }

  game = {
    init: function() {
      var j, len1, o, ref;
      document.body.style.backgroundColor = c.bgColor;
      document.body.style.overflow = 'hidden';
      for (o in stage) {
        stage[o].create();
      }
      window.requestAnimationFrame(updateFrame);
      ui.score.dom.style.left = 'auto';
      ui.life.dom.style.left = ui.score.dom.style.right = px(5);
      ui.life.dom.style.top = ui.score.dom.style.top = px(height() - 100);
      ui.life.dom.style.color = ui.score.dom.style.color = c.fgColor;
      ui.life.dom.style.position = ui.score.dom.style.position = 'absolute';
      ui.score.print('CLICK TO START THE GAME');
      ui.score.print('0 <- SCORE');
      ref = [ui.life.dom, ui.score.dom];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        o = ref[j];
        append(o);
        return this;
      }
    },
    start: function() {
      status.playing = true;
      stage.ball.vector.change(-1, -1, status.speed);
      status.life = 5;
      status.score = 0;
      stage.allBlock.show();
      logic();
      return this;
    },
    stop: function() {
      status.playing = false;
      stage.ball.vector.change(0, 0);
      ui.life.print('GAME OVER (CLICK TO RESTART)');
      return this;
    }
  };

  logic = function() {
    var j, k, len1, len2, o;
    stage.ball.x += stage.ball.vector.x;
    stage.ball.y += stage.ball.vector.y;
    if (stage.ball.edge() === 3) {
      status.life--;
    }
    for (j = 0, len1 = block.length; j < len1; j++) {
      o = block[j];
      if ((o.hit(stage.ball)) && o.live) {
        o.reflex(stage.ball);
        o.hide();
        status.score += Math.floor(0.01 * width() * width() / height());
      }
    }
    c = 0;
    for (k = 0, len2 = block.length; k < len2; k++) {
      o = block[k];
      if (!o.live) {
        c++;
      }
    }
    if (c >= 50) {
      stage.allBlock.show();
      status.score += 50;
    }
    if (stage.pad.hit(stage.ball)) {
      stage.pad.reflex(stage.ball);
      status.score += Math.floor(0.001 * width());
    }
    if (status.playing) {
      setTimeout(logic, 8);
    }
    if (status.score > status.hScore) {
      status.hScore = status.score;
    }
    if (status.life <= 0) {
      game.stop();
    }
    if (status.ai) {
      return stage.pad.x = stage.ball.x - 50;
    }
  };

  resize = function() {
    i = 0;
    while (i < 50) {
      block[i].width = width() * 0.09;
      block[i].x = width() * 0.1 * ((i % 10) + 0.05);
      i++;
    }
    stage.pad.y = height() - 40;
    return ui.life.dom.style.top = ui.score.dom.style.top = px(height() - 100);
  };

  updateFrame = function() {
    var o;
    for (o in stage) {
      stage[o].update();
    }
    if (status.playing) {
      ui.score.print(status.score + " (" + status.hScore + ") <- SCORE");
    }
    ui.life.print("LIFE -> " + status.life);
    return window.requestAnimationFrame(updateFrame);
  };

  document.addEventListener('mousemove', function(e) {
    if (status.playing && !status.ai) {
      return stage.pad.x = e.clientX - 50;
    }
  });

  document.addEventListener('click', function(e) {
    if (!status.playing) {
      return game.start();
    }
  });

  window.addEventListener('resize', function(e) {
    return window.requestAnimationFrame(resize);
  });

  stage.pad.dom.addEventListener('click', function(e) {
    return status.ai = status.ai ? false : true;
  });

  game.init();

}).call(this);
